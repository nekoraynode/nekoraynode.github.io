<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoraynode.github.io/news/article-67280.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>设计模式-六大原则之单一职责</title>
        <meta name="description" content="在校学生，闲来无事复习设计模式，写此以记录。   定义 对于单一职责的原定义是：There should never be more than one reason for a class to ch" />
        <link rel="icon" href="/assets/website/img/nekoraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NekoRayNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nekoraynode.github.io/news/article-67280.htm" />
    <meta property="og:site_name" content="NekoRayNode节点订阅站" />
    <meta property="og:title" content="设计模式-六大原则之单一职责" />
    <meta property="og:image" content="https://nekoraynode.github.io/uploads/20240626/db303261065e346bcad5257abed168b0.webp" />
        <meta property="og:release_date" content="2025-03-04T10:15:24" />
    <meta property="og:updated_time" content="2025-03-04T10:15:24" />
        <meta property="og:description" content="在校学生，闲来无事复习设计模式，写此以记录。   定义 对于单一职责的原定义是：There should never be more than one reason for a class to ch" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="设计模式-六大原则之单一职责">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@500;600;700&family=Rubik:wght@400;500&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/nekoraynode/lightbox/css/lightbox.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/nekoraynode/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/nekoraynode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-E6TD6QHWW6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-E6TD6QHWW6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Spinner Start -->
    <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar & Hero Start -->
    <div class="container-fluid p-0">
                <nav class="navbar navbar-expand-lg fixed-top navbar-light px-4 px-lg-5 py-3 py-lg-0">
            <a href="/" class="navbar-brand p-0">
                <a href="/">
                                <span class="display-6 text-primary m-0">
                    <i class="fas fa-envelope me-3"></i>NekoRay Node                </span>
                                </a>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                <span class="fa fa-bars"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <div class="navbar-nav ms-auto py-0">
                                        <a href="/" class="nav-item nav-link">首页</a>
                                        <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                        <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                        <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                        <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                    </div>
            </div>
        </nav>
    </div>
    <!-- Navbar & Hero End -->
    <!-- Header Start -->
    <div class="container-fluid bg-breadcrumb">
        <ul class="breadcrumb-animation">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
        <div class="container text-center py-5" style="max-width: 900px;">
            <h3 class="display-3 mb-4 wow fadeInDown" data-wow-delay="0.1s">设计模式-六大原则之单一职责</h1>
                <ol class="breadcrumb justify-content-center mb-0 wow fadeInDown" data-wow-delay="0.3s">
                    <li class="breadcrumb-item"><a href="/">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                    <li class="breadcrumb-item active text-primary">正文</li>
                </ol>
        </div>
    </div>
    <!-- Header End -->
    <!-- About Start -->
    <div class="container-fluid py-5">
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <blockquote> <p>在校学生，闲来无事复习设计模式，写此以记录。</p> </blockquote> <h2> <a id="_3" rel="nofollow"></a>定义</h2> <p>对于单一职责的原定义是：There should never be more than one reason for a class to change.很简单的一句英文，有且只有一个原因能引起类的改变。即使对于英语很渣的我来说也能看懂，但要想理解却也是不容易。<br /> 单一职责主要应用于三个方面，接口、类和方法。我下面给出一些示例来详细阐述我的看法。</p> <h3> <a id="_7" rel="nofollow"></a>对于接口</h3> <p>Java本就是面向接口编程，接口的定义基本定下了后面实现类的走向。记得刚接触Java没多久的时候，根本无法体会到接口存在的意义，很多时候都不去写接口，即时写也都是随便糊弄那种。为此写过下面这段很蠢的代码</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 接口方法  * @Date 2019/10/22-17:08  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>在实现类中</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证方法          */</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>各位应该都能看出这段代码写的是有多差劲，我在一个接口中同时将登录和注册都写了进去，而在写登录和注册的实体类的时候又分开写，两个实体类都需要继承UserInfo接口，但这就造成登录实体类根本不需要注册这部分方法但我不得不去实现它。虽然这里也可以将登录和注册的实体类写在一起，这样就可以避免这种情况，但这样就造成了这个类的复杂程度进一步提高，如果项目越做越大，后面的维护就变得相当困难。<br /> 为此不如看看下面的这种写法</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 登录接口  * @Date 2019/10/22-17:31  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 注册接口  * @Date 2019/10/22-17:32  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:38  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegister</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这种方式就是简单的实现了接口的单一职责。我的理解，接口的单一职责就是将一种功能或者某一类基本相似的功能放到一起。</p> <h3> <a id="_123" rel="nofollow"></a>类的单一职责</h3> <p>对于类的单一职责，我感觉没有很严格的规范，需求不同，实现的方式也不同，下面依旧按照登录和注册的例子列举两种不同的写法。<br /> 对于一个用户来说，一个用户就是一个实体，一个实体就应该包括相应的操作。</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:56  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>          <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>但如果用户中每一步操作的话又可以将每步操作分开写</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Register</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Update</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>虽然在这里第二种写法显得有些累赘，但确实严格按照单一职责的原则。没有孰优孰劣，只有适不适合，如果一个大型项目中一个用户的操作有相当大量的代码要进行实现的时候采用第二种方法分开写也没有任何错误。</p> <h2> <a id="_204" rel="nofollow"></a>方法的单一职责</h2> <p>个人感觉，方法的单一职责可以参考接口，尽量避免一个方法中进行多种类型的操作，参考《设计模式之禅》写出下面的示例</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">,</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          <span class="token comment">//更新用户名</span>          <span class="token comment">//更新密码</span>          <span class="token comment">//更新性别</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>在这个示例中，当用户提交修改账户信息的指令后service层调用changeInfo方法，直接对所有需要修改的账户信息进行修改，但这造成一个问题，changeInfo这个方法的职责太过笼统，如果后期需要添加或者修改这部分的代码，可能会造成较大的麻烦。<br /> 下面对代码进行优化</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新用户名</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新用户名操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新密码</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changePassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新密码操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新性别</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新性别操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>改进后每个修改部分都有对应的方法，后期如果需要进行大量的修改会更加清晰，维护也更加方便。</p> <p>单一职责最重要的特点就是提高代码的可维护性，可读性和扩展性。但其中很多部分还要结合实际需求去考虑，采用最合适的方式。</p> <p>参考资料：《设计模式之禅》《一故事一设计模式》</p> <p><strong>如哪里写的有不对的地方，欢迎大家指正。</strong></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-66632.htm">派多格宠物美容培训学校官网宿舍图片（派多格宠物技术专修学校地址）</a></p>
                                        <p>下一个：<a href="/news/article-67282.htm">猫咪疫苗三针要隔多少天打（猫的疫苗三针隔多久）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-46130.htm" title="宠物粮市场分析论文范文怎么写（宠物粮市场开发方案）">宠物粮市场分析论文范文怎么写（宠物粮市场开发方案）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-free-nekoray-node.htm" title="「1月6日」最高速度21.2M/S，2025年NekoRay每天更新免费节点订阅链接">「1月6日」最高速度21.2M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-21-linux-nekoray-node.htm" title="「1月21日」最高速度22.2M/S，2025年NekoRay每天更新免费节点订阅链接">「1月21日」最高速度22.2M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-53828.htm" title="动物疫苗定义（什么是动物疫苗,有哪些种类?）">动物疫苗定义（什么是动物疫苗,有哪些种类?）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-13-share-windows-nekoray.htm" title="「1月13日」最高速度18.5M/S，2025年NekoRay每天更新免费节点订阅链接">「1月13日」最高速度18.5M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-44125.htm" title="佳雯宠物医院总院电话多少啊（佳雯宠物医院总院投诉电话）">佳雯宠物医院总院电话多少啊（佳雯宠物医院总院投诉电话）</a></li>
                        <li class="py-2"><a href="/news/article-51131.htm" title="免费领养宠物套路是真的吗（免费领养宠物的平台是真的吗）">免费领养宠物套路是真的吗（免费领养宠物的平台是真的吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-18-share-windows-nekoray.htm" title="「2月18日」最高速度21.1M/S，2025年NekoRay每天更新免费节点订阅链接">「2月18日」最高速度21.1M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-41151.htm" title="宠物医院看猫癣贵吗（去宠物医院看猫癣）">宠物医院看猫癣贵吗（去宠物医院看猫癣）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-18-shadowrocket-node.htm" title="「1月18日」最高速度22M/S，2025年NekoRay每天更新免费节点订阅链接">「1月18日」最高速度22M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- About End -->
        <!-- Copyright Start -->
    <div class="container-fluid copyright py-4">
        <div class="container">
            <div class="row g-4 align-items-center">
                <div class="col-md-6 text-center text-md-start mb-md-0">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <span class="text-white">NekoRayNode节点订阅站 版权所有 Powered by WordPress</span>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary btn-lg-square back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/nekoraynode/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/nekoraynode/lightbox/js/lightbox.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/nekoraynode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>