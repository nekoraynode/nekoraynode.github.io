<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoraynode.github.io/news/article-60573.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>SpringAOP的源码解析</title>
        <meta name="description" content="一、SpringAOP的概念 一、AOP的基本概念 1、连接点（Joinpoint）：可以被增强的方法。 2、切点（Pointcut）：实际被增强的方法。 3、通知（Advice）（增强）： 　　3." />
        <link rel="icon" href="/assets/website/img/nekoraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NekoRayNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nekoraynode.github.io/news/article-60573.htm" />
    <meta property="og:site_name" content="NekoRayNode节点订阅站" />
    <meta property="og:title" content="SpringAOP的源码解析" />
    <meta property="og:image" content="https://nekoraynode.github.io/uploads/20240626/4d47ac748776d1b14c444efa10e624b9.webp" />
        <meta property="og:release_date" content="2025-02-21T09:21:41" />
    <meta property="og:updated_time" content="2025-02-21T09:21:41" />
        <meta property="og:description" content="一、SpringAOP的概念 一、AOP的基本概念 1、连接点（Joinpoint）：可以被增强的方法。 2、切点（Pointcut）：实际被增强的方法。 3、通知（Advice）（增强）： 　　3." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringAOP的源码解析">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@500;600;700&family=Rubik:wght@400;500&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/nekoraynode/lightbox/css/lightbox.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/nekoraynode/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/nekoraynode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-E6TD6QHWW6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-E6TD6QHWW6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Spinner Start -->
    <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar & Hero Start -->
    <div class="container-fluid p-0">
                <nav class="navbar navbar-expand-lg fixed-top navbar-light px-4 px-lg-5 py-3 py-lg-0">
            <a href="/" class="navbar-brand p-0">
                <a href="/">
                                <span class="display-6 text-primary m-0">
                    <i class="fas fa-envelope me-3"></i>NekoRay Node                </span>
                                </a>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                <span class="fa fa-bars"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <div class="navbar-nav ms-auto py-0">
                                        <a href="/" class="nav-item nav-link">首页</a>
                                        <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                        <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                        <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                        <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                    </div>
            </div>
        </nav>
    </div>
    <!-- Navbar & Hero End -->
    <!-- Header Start -->
    <div class="container-fluid bg-breadcrumb">
        <ul class="breadcrumb-animation">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
        <div class="container text-center py-5" style="max-width: 900px;">
            <h3 class="display-3 mb-4 wow fadeInDown" data-wow-delay="0.1s">SpringAOP的源码解析</h1>
                <ol class="breadcrumb justify-content-center mb-0 wow fadeInDown" data-wow-delay="0.3s">
                    <li class="breadcrumb-item"><a href="/">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                    <li class="breadcrumb-item active text-primary">正文</li>
                </ol>
        </div>
    </div>
    <!-- Header End -->
    <!-- About Start -->
    <div class="container-fluid py-5">
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h3 id="一springaop的概念">一、SpringAOP的概念</h3> <p>一、AOP的基本概念</p> <p>1、连接点（Joinpoint）：可以被增强的方法。</p> <p>2、切点（Pointcut）：实际被增强的方法。</p> <p>3、通知（Advice）（增强）：</p> <p>　　3.1.实际增强的逻辑部分叫做通知</p> <p>　　3.2.通知类型包括</p> <ol> <li>前置通知（执行方法前执行，通常用作参数日志输出、权限校验等）</li> <li>后置通知（逻辑代码执行完，准备执行return的代码时通知，通常用作执行结果日志输出、结果加密等）</li> <li>环绕通知（是前置通知和后置通知的综合，方法执行前和方法执行后都要执行，通常用作方法性能统计、接口耗时、统一加密、解密等）</li> <li>异常通知（相当于try{}catch ()中catch执行的部分,程序抛出异常时执行，通常用作告警处理、事务回滚等）</li> <li>最终通知（相当于try{}catch (Exception e){}finally { }中的finally执行的部分，通常用在关闭资源、清理缓存等业务逻辑中）</li> </ol> <p>4、切面（Aspect）：把通知(增强)应用到切入点的过程。</p> <p>二、Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p> <p>（1）AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</p> <p>三、基于 AspectJ 实现 AOP 操作</p> <p>（1）基于 xml 配置文件实现</p> <p>（2）基于注解方式实现（使用）</p> <h3 id="二springaop的使用">二、SpringAOP的使用</h3> <p>1.通过maven方式引用jar包</p> <pre><code class="language-java">    &lt;dependency&gt;       &lt;groupId&gt;org.springframework&lt;/groupId&gt;       &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;       &lt;version&gt;5.3.17&lt;/version&gt;     &lt;/dependency&gt;</code></pre> <p>2.创建被代理接口和实现类。代码如下：</p> <pre><code class="language-java">package com.ybe.aop;  public interface  Calculate {     /**      * 除法      * @param numA      * @param numB      * @return      */     int div(int numA,int numB); }</code></pre> <pre><code class="language-java">package com.ybe.aop.impl;  import com.ybe.aop.Calculate;  public class CalculateImpl implements Calculate {        @Override     public int div(int numA, int numB) {         System.out.println("执行目标方法：div");         return numA / numB;     } }</code></pre> <p>3.使用@Aspect注解创建切面类（Aspect），代码如下：</p> <pre><code class="language-java">package com.ybe.aop.aspect;  import org.aspectj.lang.JoinPoint; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component;  import java.util.Arrays;  @Aspect @Component public class LogAspectj {      @Pointcut("execution(* com.ybe.aop.impl.CalculateImpl.*(..))")     private void pointCut(){     }      @Before(value = "pointCut()")     public void methodBefore(JoinPoint joinPoint) throws Throwable {         String methodName = joinPoint.getSignature().getName();         System.out.println("执行目标方法【"+methodName+"】的&lt;前置通知&gt;,入参"+Arrays.asList(joinPoint.getArgs()));     }      @After(value = "pointCut()")     public void methodAfter(JoinPoint joinPoint) {         String methodName = joinPoint.getSignature().getName();         System.out.println("执行目标方法【"+methodName+"】的&lt;后置通知&gt;,入参"+Arrays.asList(joinPoint.getArgs()));     }      @AfterReturning(value = "pointCut()",returning = "result")     public void methodReturning(JoinPoint joinPoint, Object result) {         String methodName = joinPoint.getSignature().getName();         System.out.println("执行目标方法【"+methodName+"】的&lt;返回通知&gt;,入参"+Arrays.asList(joinPoint.getArgs()));     }      @AfterThrowing(value = "pointCut()")     public void methodAfterThrowing(JoinPoint joinPoint) {         String methodName = joinPoint.getSignature().getName();         System.out.println("执行目标方法【"+methodName+"】的&lt;异常通知&gt;,入参"+Arrays.asList(joinPoint.getArgs()));     }  }</code></pre> <p>4.创建Config 配置类，使用注解@EnableAspectJAutoProxy开启aop功能，代码如下：</p> <pre><code class="language-java">package com.ybe.aop.config;  import com.ybe.aop.Calculate; import com.ybe.aop.impl.CalculateImpl; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.EnableAspectJAutoProxy;  @Configuration @ComponentScan("com.ybe.aop") @EnableAspectJAutoProxy public class Config {     @Bean     public Calculate calculate(){         return new CalculateImpl();     } }</code></pre> <p>5.Main的代码</p> <pre><code class="language-java"> AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);  Calculate proxyFactoryBean = context.getBean("calculate", Calculate.class);  context.div(1,1);</code></pre> <p>6.运行结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bcf56fced48aefa78bce1c6c1b1b5f4d.jpg" alt="SpringAOP的源码解析"></p> <h3 id="三springaop的源码分析">三、SpringAOP的源码分析</h3> <p>SpringAop实现利用了SpringIoc容器。在SpringIOC容器的生命周期过程中整合了SpringAOP的功能。大概过程：通过 @Import注册 实现了ImportBeanDefinitionRegistrar 接口的 AspectJAutoProxyRegistrar 类。在该类中添加实现了 InstantiationAwareBeanPostProcessor 接口的 AnnotationAwareAspectJAutoProxyCreator 类。在创建AnnoteationConfigApplicationContext的构造函数中会调用refresh()方法。refresh方法会进行 AspectJAutoProxyRegistrar 的调用，并且生成</p> <p>AnnotationAwareAspectJAutoProxyCreator 的Bean对象。在第一次调用 CreateBean 的时候，进行Advisors的创建。在创建完 Bean后会调用AnnotationAwareAspectJAutoProxyCreator的 postProcessAfterInitialization方法。从 Advisors 中查找是否匹配当前正在创建的Bean。如果能匹配，则创建相关的动态代理对象。</p> <p><strong>完整源码分析分三部分:SpringAOP的初始化、创建动态代理、代理方法调用过程。</strong></p> <h4 id="一springaop的初始化"><strong>一、SpringAOP的初始化。</strong></h4> <p>主要逻辑是找到所有标注了 @Aspect 的类，并且解析类中所有的通知方法并添加到 BeanFactoryAspectJAdvisorsBuilder.advisorsCache 缓存中。</p> <p><strong>整体代码流程图如下：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/def49f68b4a1175d5d0444e614fa0486.jpg" alt="SpringAOP的源码解析"></p> <p><strong>说明：</strong></p> <ol> <li> <p>创建 AnnotationConfigApplicationContext() 容器。</p> </li> <li> <p>在invokeBeanFactoryPostProcessors()中，会调用 ConfigurationClassPostProcessor 的 postProcessBeanDefinitionRegistry() 。在此方法中，会找到 @EnableAspectJAutoProxy 的 @Import 属性传入的 AspectJAutoProxyRegistrar.class 类。并且执行该类的registerBeanDefinitions() 方法，创建类型为 AnnotationAwareAspectJAutoProxyCreator 、名称为org.springframework.aop.<br /> config.internalAutoProxyCreator的 RootBeanDefinition注册到BeanDefinitionRegistry中。</p> </li> <li> <p>在 registerBeanPostProcessors() 中会根据上面一步生成的 RootBeanDefinition对象创建 AnnotationAwareAspectJAutoProxyCreator 的实例。</p> </li> <li> <p>在 finishBeanFactoryInitialization() 中第一次执行到 AbstractAutowireCapableBeanFactory.createBean() 时，会执行一段这样的代码，如下</p> <pre><code class="language-java">try {         // 让 BeanPostProcessors 有机会返回一个代理而不是目标 bean 实例         Object bean = resolveBeforeInstantiation(beanName, mbdToUse);         if (bean != null) {             return bean;         } }</code></pre> <pre><code class="language-java">@Nullable protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) { 		Object bean = null; 		if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) { 			// Make sure bean class is actually resolved at this point. 			if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) { 				Class&lt;?&gt; targetType = determineTargetType(beanName, mbd); 				if (targetType != null) { 					bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName); 					if (bean != null) { 						bean = applyBeanPostProcessorsAfterInitialization(bean, beanName); 					} 				} 			} 			mbd.beforeInstantiationResolved = (bean != null); 		} 		return bean; }</code></pre> <pre><code class="language-Java">@Nullable protected Object applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) { 	    for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {              Object result = bp.postProcessBeforeInstantiation(beanClass, beanName);              if (result != null) {                return result;              }            }          return null; }</code></pre> <p>以上代码会执行 AnnotationAwareAspectJAutoProxyCreator 的 postProcessBeforeInstantiation() 方法。在该方法中会 执行 shouldSkip() 方法。代码如下：</p> <pre><code class="language-java">@Override protected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) {     // TODO: Consider optimization by caching the list of the aspect names  // 找到所有候选的 Advisors  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();  for (Advisor advisor : candidateAdvisors) {      if (advisor instanceof AspectJPointcutAdvisor &amp;&amp;          ((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) {          return true;      }  }  return super.shouldSkip(beanClass, beanName); }</code></pre> <p>在 findCandidateAdvisors 中具体会生成所有的 Advisors。</p> <pre><code class="language-java">@Override protected List&lt;Advisor&gt; findCandidateAdvisors() { 		// 找到所有的 实现了 Advisor.class 接口的类，并且生成候选的 Advisors. 		List&lt;Advisor&gt; advisors = super.findCandidateAdvisors(); 		// 创建所有的带了 @Aspect 特性的切面类 . 		if (this.aspectJAdvisorsBuilder != null) { 			advisors.addAll(this.aspectJAdvisorsBuilder.buildAspectJAdvisors()); 		} 		return advisors; }</code></pre> <p>aspectJAdvisorsBuilder.buildAspectJAdvisors() 是核心。方法里面的逻辑如下：</p> <pre><code class="language-xml">1.获取容器里所有的beanNames. 2.遍历 beanNames，根据beanName获取对应的beanType对象。 3.判断beanType是否有@Aspect注解。 4.如果有，调用getAdvisorMethods()通过反射获取该类型所有的 advisor 的 method 元数据。 5.遍历 methods 调用 getAdvisor() 获取 Advisor 对象（InstantiationModelAwarePointcutAdvisorImpl） 6.添加到 this.advisorsCache 中。</code></pre> </li> </ol> <p>	    postProcessBeforeInstantiation方法会缓存所有的advisor，方法的最后返回 null。至此整个 SpringAOP的初始化完成。</p> <h4 id="二创建动态代理"><strong>二、创建动态代理</strong></h4> <p>		在创建Bean的生命周期的 initializeBean 方法中，会执行 AnnotationAwareAspectJAutoProxyCreator的 postProcessAfterInitialization方法。该方法会拿缓存BeanFactoryAspectJAdvisorsBuilder.advisorsCache 中所有advisor的pointCut去匹配正在创建的实例Bean的所有方法。如果 advisor 和 Bean 的某一个方法能匹配上，则把该advisor添加到 advisor的候选集合中。直到找出匹配Bean的所有Adsivors。最后根据Adsivor的候选集合和Bean类型创建动态代理对象ProxyFactory。</p> <p><strong>整体代码流程图如下：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a481e3ca497d5d279a00ac5ed3202a9a.jpg" alt="SpringAOP的源码解析"></p> <p><strong>说明：</strong></p> <p><strong>1.List<advisor rel="nofollow">排序后的顺序为：</advisor></strong></p> <p><em>ExposeInvocationInterceptor</em></p> <p>Around</p> <p>Before</p> <p>After</p> <p>AfterReturning</p> <p>AfterThrowing</p> <p><strong>2.动态代理的创建</strong></p> <p>创建动态代理有两种方法，一种是 JDK ，一种是 CGLib 。</p> <p>1.如果目标类有实现接口的话，则是使用JDK的方式生成代理对象。</p> <p>2.配置了使用Cglib进行动态代理或者目标类没有实现接口,那么使用Cglib的方式创建代理对象。</p> <h4 id="三动态代理调用">三、动态代理调用</h4> <p>以 JdkDynamicAopProxy 为例，在调用方法的时候会直接调用 JdkDynamicAopProxy.invoke()方法，里面的大概逻辑如下：</p> <p>1.获取被代理的实现类；</p> <p>2.找出所有匹配被调用方法的 advisor，并且转成具体的通知拦截器 MethodInterceptor，返回通知拦截器链。转换代码如下：</p> <pre><code class="language-java">List&lt;MethodInterceptor&gt; interceptors = new ArrayList&lt;&gt;(3); // 从Advisor中获取 Advice Advice advice = advisor.getAdvice(); // 如果 advice 本身就实现了  MethodInterceptor 接口 ，则直接进行转换 if (advice instanceof MethodInterceptor) {     interceptors.add((MethodInterceptor) advice); } // AfterReturningAdviceInterceptor MethodBeforeAdviceInterceptor  ThrowsAdviceInterceptor  // 这三种是通过适配器的方式进行转换 MethodInterceptor类型 for (AdvisorAdapter adapter : this.adapters) {     if (adapter.supportsAdvice(advice)) {         interceptors.add(adapter.getInterceptor(advisor));     } } if (interceptors.isEmpty()) {     throw new UnknownAdviceTypeException(advisor.getAdvice()); } return interceptors.toArray(new MethodInterceptor[0]);</code></pre> <p>3.创建 ReflectiveMethodInvocation 对象（该对象中包括了 代理对象、被代理对象、执行的方法、方法参数、被代理对象的类型、通知拦截器链），执行该对象的proceed()方法，该方法中会进行通知拦截器链的递归调用，具体调用流程如下图。ReflectiveMethodInvocation 对象在通知拦截器链调用中作用很关键，有衔接各个拦截器的作用。</p> <p><strong>代码流程如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/394ff05c539f5c8fe82bd0fbfc81e758.jpg" alt="SpringAOP的源码解析"></p> <p><strong>说明：</strong></p> <p>1.在proceed方法中，会先判断当前拦截器链的索引，如果索引等于最后一个那么则执行被代理类的方法。</p> <p>2.如果不是，那么先获取该通知拦截器并且执行该拦截器的 proceed 方法（方法接受 ReflectiveMethodInvocation 对象实例），每个通知拦截器中都会调用  ReflectiveMethodInvocation 对象实例 的proceed 方法。在这里会形成递归调用。</p> <p>3.通知拦截器的排序请看下图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5e342e77615c81bda59ba4dc9fdedd80.jpg" alt="SpringAOP的源码解析"></p> <p>4.五个通知拦截器的代码解释请看上面的代码流程图。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60000.htm">上海地区宠物领养平台 上海地区宠物领养平台有哪些</a></p>
                                        <p>下一个：<a href="/news/article-60574.htm">Docker极简入门：使用Docker-Compose 搭建redis集群</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-9-free-node-subscribe-links.htm" title="「1月9日」最高速度18.5M/S，2025年NekoRay每天更新免费节点订阅链接">「1月9日」最高速度18.5M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-linux-nekoray.htm" title="「12月17日」最高速度19.1M/S，2024年NekoRay每天更新免费节点订阅链接">「12月17日」最高速度19.1M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-28-node-share-links.htm" title="「12月28日」最高速度21.2M/S，2024年NekoRay每天更新免费节点订阅链接">「12月28日」最高速度21.2M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23980.htm" title="宠物店粮食一个月要多少斤（宠物店粮食一个月要多少斤正常）">宠物店粮食一个月要多少斤（宠物店粮食一个月要多少斤正常）</a></li>
                        <li class="py-2"><a href="/news/article-27705.htm" title="基于vue-seamless-scroll实现无缝滚动效果_vue.js">基于vue-seamless-scroll实现无缝滚动效果_vue.js</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-node-share.htm" title="「11月18日」最高速度18.4M/S，2024年NekoRay每天更新免费节点订阅链接">「11月18日」最高速度18.4M/S，2024年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-51129.htm" title="IntelliJ IDEA 使用Tomcat配置和项目部署详细教程">IntelliJ IDEA 使用Tomcat配置和项目部署详细教程</a></li>
                        <li class="py-2"><a href="/news/article-32897.htm" title="宠物领养APP信息架构设计（宠物领养软件下载）">宠物领养APP信息架构设计（宠物领养软件下载）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-22-free-nekoray-node.htm" title="「2月22日」最高速度20.7M/S，2025年NekoRay每天更新免费节点订阅链接">「2月22日」最高速度20.7M/S，2025年NekoRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33436.htm" title="给动物打疫苗要多少钱一次呀图片（给动物打疫苗要多少钱一次呀图片）">给动物打疫苗要多少钱一次呀图片（给动物打疫苗要多少钱一次呀图片）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- About End -->
        <!-- Copyright Start -->
    <div class="container-fluid copyright py-4">
        <div class="container">
            <div class="row g-4 align-items-center">
                <div class="col-md-6 text-center text-md-start mb-md-0">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <span class="text-white">NekoRayNode节点订阅站 版权所有 Powered by WordPress</span>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary btn-lg-square back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/nekoraynode/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/nekoraynode/lightbox/js/lightbox.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/nekoraynode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>